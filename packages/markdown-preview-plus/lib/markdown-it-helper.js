"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
const twemoji = require("twemoji");
const path = require("path");
const util_1 = require("./util");
const lodash_1 = require("lodash");
function mathInline(tok) {
    return `<span class='math inline-math'><script type='math/tex'>${tok.content}</script></span>`;
}
function mathBlock(tok) {
    let attrs = tok.attrs && tok.attrs.map(([n, v]) => `${n}="${v}"`).join(' ');
    if (!attrs)
        attrs = '';
    else
        attrs = ' ' + attrs;
    return `<span class='math display-math'${attrs}><script type='math/tex; mode=display'>${tok.content}</script></span>`;
}
function addSourceMapData(token) {
    if (token.map && token.nesting >= 0) {
        token.attrSet('data-source-lines', `${token.map[0]} ${token.map[1]}`);
    }
    return token;
}
function recurseTokens(fn) {
    const rf = function (token) {
        if (token.children)
            token.children = token.children.map(rf);
        fn(token);
        return token;
    };
    return rf;
}
function sourceLineData(md) {
    md.core.ruler.push('logger', function (state) {
        if (!state.env.sourceMap)
            return state;
        state.tokens = state.tokens.map(recurseTokens(addSourceMapData));
        return state;
    });
}
function getOptions(breaks) {
    return {
        html: true,
        xhtmlOut: false,
        breaks,
        langPrefix: 'lang-',
        linkify: true,
        typographer: true,
    };
}
function currentConfig(rL) {
    const config = util_1.atomConfig().markdownItConfig;
    return {
        renderLaTeX: rL,
        lazyHeaders: config.useLazyHeaders,
        checkBoxes: config.useCheckBoxes,
        toc: config.useToc,
        emoji: config.useEmoji,
        breaks: config.breakOnSingleNewline,
        criticMarkup: config.useCriticMarkup,
        footnote: config.useFootnote,
        imsize: config.useImsize,
        inlineMathSeparators: config.inlineMathSeparators,
        blockMathSeparators: config.blockMathSeparators,
        forceFullToc: config.forceFullToc,
        tocDepth: config.tocDepth,
    };
}
function init(initState) {
    const markdownIt = markdownItModule(getOptions(initState.breaks));
    if (initState.renderLaTeX) {
        const inlineDelim = util_1.pairUp(initState.inlineMathSeparators, 'inlineMathSeparators');
        const blockDelim = util_1.pairUp(initState.blockMathSeparators, 'blockMathSeparators');
        markdownIt.use(require('./markdown-it-math').math_plugin, {
            inlineDelim,
            blockDelim,
            inlineRenderer: mathInline,
            blockRenderer: mathBlock,
        });
    }
    markdownIt.use(sourceLineData);
    if (initState.lazyHeaders)
        markdownIt.use(require('markdown-it-lazy-headers'));
    if (initState.checkBoxes)
        markdownIt.use(require('markdown-it-task-lists'));
    if (initState.toc) {
        markdownIt.use(require('markdown-it-anchor'));
        markdownIt.use(require('markdown-it-table-of-contents'), {
            includeLevel: Array.from({ length: initState.tocDepth }, (_, i) => i + 1),
            forceFullToc: initState.forceFullToc,
        });
    }
    if (initState.emoji) {
        markdownIt.use(require('markdown-it-emoji'));
        markdownIt.renderer.rules.emoji = function (token, idx) {
            return twemoji.parse(token[idx].content, {
                folder: path.join('assets', 'svg'),
                ext: '.svg',
                base: path.dirname(require.resolve('twemoji-assets')) + path.sep,
            });
        };
    }
    if (initState.criticMarkup) {
        markdownIt.use(require('./markdown-it-criticmarkup'));
    }
    if (initState.footnote) {
        markdownIt.use(require('markdown-it-footnote'));
    }
    if (initState.imsize)
        markdownIt.use(require('markdown-it-imsize'));
    return markdownIt;
}
function wrapInitIfNeeded(initf) {
    let markdownIt = null;
    let initState = null;
    return function (newState) {
        if (markdownIt === null || !lodash_1.isEqual(initState, newState)) {
            initState = newState;
            markdownIt = initf(newState);
        }
        return markdownIt;
    };
}
const initIfNeeded = wrapInitIfNeeded(init);
function render(text, rL) {
    const markdownIt = initIfNeeded(currentConfig(rL));
    return markdownIt.render(text);
}
exports.render = render;
function getTokens(text, rL) {
    const markdownIt = initIfNeeded(currentConfig(rL));
    return markdownIt.render(text, { sourceMap: true });
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const electron_1 = require("electron");
const fileUriToPath = require("file-uri-to-path");
const util_1 = require("../util");
const util_2 = require("./util");
class WebviewHandler {
    constructor(init) {
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.zoomLevel = 0;
        this.replyCallbacks = new Map();
        this.replyCallbackId = 0;
        this._element = document.createElement('webview');
        this._element.classList.add('markdown-preview-plus', 'native-key-bindings');
        this._element.disablewebsecurity = 'true';
        this._element.nodeintegration = 'true';
        this._element.src = `file:///${__dirname}/../../client/template.html`;
        this._element.style.width = '100%';
        this._element.style.height = '100%';
        this._element.addEventListener('ipc-message', (e) => {
            switch (e.channel) {
                case 'zoom-in':
                    this.zoomIn();
                    break;
                case 'zoom-out':
                    this.zoomOut();
                    break;
                case 'did-scroll-preview':
                    this.emitter.emit('did-scroll-preview', e.args[0]);
                    break;
                case 'uncaught-error': {
                    const err = e.args[0];
                    const newErr = new Error();
                    atom.notifications.addFatalError(`Uncaught error ${err.name} in markdown-preview-plus webview client`, {
                        dismissable: true,
                        stack: newErr.stack,
                        detail: `${err.message}\n\nstack:\n${err.stack}`,
                    });
                    break;
                }
                case 'show-context-menu': {
                    atom.contextMenu.showForEvent({ target: this._element });
                    break;
                }
                case 'request-reply': {
                    const { id, request, result } = e.args[0];
                    const cb = this.replyCallbacks.get(id);
                    if (cb && request === cb.request) {
                        const callback = cb.callback;
                        callback(result);
                    }
                    break;
                }
            }
        });
        this._element.addEventListener('will-navigate', async (e) => {
            const exts = util_1.atomConfig().previewConfig.shellOpenFileExtensions;
            const forceOpenExternal = exts.some((ext) => e.url.toLowerCase().endsWith(`.${ext.toLowerCase()}`));
            if (e.url.startsWith('file://') && !forceOpenExternal) {
                util_1.handlePromise(atom.workspace.open(fileUriToPath(e.url)));
            }
            else {
                electron_1.shell.openExternal(e.url);
            }
        });
        this.disposables.add(atom.styles.onDidAddStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }), atom.styles.onDidRemoveStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }), atom.styles.onDidUpdateStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }));
        this.initPromise = new Promise((resolve) => {
            this._element.addEventListener('dom-ready', () => {
                if (this.destroyed)
                    return;
                this._element.setZoomLevel(this.zoomLevel);
                resolve();
                util_1.handlePromise(this.updateStyles().then(init));
            });
        });
    }
    get element() {
        return this._element;
    }
    async runJS(js) {
        return new Promise((resolve) => this._element.executeJavaScript(js, false, resolve));
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        this._element.remove();
    }
    async update(html, renderLaTeX) {
        if (this.destroyed)
            return undefined;
        return this.runRequest('update-preview', {
            html,
            renderLaTeX,
        });
    }
    async setSourceMap(map) {
        return this.send('set-source-map', { map });
    }
    async setBasePath(path) {
        return this.send('set-base-path', { path });
    }
    async init(params) {
        return this.send('init', params);
    }
    async updateImages(oldSource, version) {
        return this.send('update-images', {
            oldsrc: oldSource,
            v: version,
        });
    }
    async printToPDF(opts) {
        return new Promise((resolve, reject) => {
            this._element.getWebContents().printToPDF(opts, (error, data) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(data);
            });
        });
    }
    async sync(line, flash) {
        return this.send('sync', { line, flash });
    }
    async syncSource() {
        return this.runRequest('sync-source', {});
    }
    async scrollSync(firstLine, lastLine) {
        return this.send('scroll-sync', { firstLine, lastLine });
    }
    zoomIn() {
        this.zoomLevel += 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    zoomOut() {
        this.zoomLevel -= 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    resetZoom() {
        this.zoomLevel = 0;
        this._element.setZoomLevel(this.zoomLevel);
    }
    print() {
        this._element.print();
    }
    openDevTools() {
        this._element.openDevTools();
    }
    async reload() {
        await this.runRequest('reload', {});
        this._element.reload();
    }
    async error(msg) {
        return this.send('error', { msg });
    }
    async getTeXConfig() {
        return this.runRequest('get-tex-config', {});
    }
    async getSelection() {
        return this.runRequest('get-selection', {});
    }
    async updateStyles() {
        return this.send('style', { styles: util_2.getPreviewStyles(true) });
    }
    async runRequest(request, args) {
        const id = this.replyCallbackId++;
        const result = new Promise((resolve) => {
            this.replyCallbacks.set(id, {
                request: request,
                callback: (result) => {
                    this.replyCallbacks.delete(id);
                    resolve(result);
                },
            });
        });
        const newargs = Object.assign({ id }, args);
        await this.send(request, newargs);
        return result;
    }
    async send(channel, value) {
        await this.initPromise;
        this._element.send(channel, value);
    }
}
exports.WebviewHandler = WebviewHandler;
//# sourceMappingURL=data:application/json;base64,